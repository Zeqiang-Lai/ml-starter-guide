[{"id":0,"href":"/ml-starter-guide/docs/share/dataset/hsi/","title":"光谱数据集","section":"数据集","content":"Hyperspectral (光谱数据集) #  🌟 存放位置: /share/dataset/hsi\n├── cave ├── harvard ├── icvl │ ├── test │ │ ├── icvl_512_30 │ │ ├── icvl_512_50 │ │ ├── icvl_512_70 │ │ ├── icvl_512_blind │ │ ├── icvl_512_deadline │ │ ├── icvl_512_impulse │ │ ├── icvl_512_mixture │ │ ├── icvl_512_noniid │ │ └── icvl_512_stripe │ └── train │ └── ICVL64_31_100.db ├── raw └── remote ├── Indian_pines.mat ├── Pavia.mat ├── PaviaU.mat ├── Salinas.mat └── Urban_R162.mat ICVL #  自然场景高光谱图像数据集\n 来源： Official Website 服务器存放路径: /data/dataset/hsi/icvl  Meta Data\n 201 张图  示例图:\n 文件结构:\n Cite\n@inproceedings{arad_and_ben_shahar_2016_ECCV, title={Sparse Recovery of Hyperspectral Signal from Natural RGB Images}, author={Arad, Boaz and Ben-Shahar, Ohad}, booktitle={European Conference on Computer Vision}, pages={19--34}, year={2016}, organization={Springer} } CAVE #  Harvard #  Remote Sensed #  "},{"id":1,"href":"/ml-starter-guide/docs/share/","title":"公共资源","section":"Docs","content":"公共资源 #  实验室的服务器设置有公共数据集，公共Conda环境，公共软件资源等。\n大家可以按需自行获取使用。\n存放位置 #     内容 路径     公共数据集 /share/dataset   公共Conda环境 /share/envs   公共软件资源 /share/software   Cuda,GCC等 /share/opt    使用方法 #  数据集\n 大家可以自行读取，但请不要往/share/dataset写，以及删除东西（虽然你可能根本没有权限）。 使用 torchlight 里的 data.dataset 模块进行读取。（正在实现当中）  Conda环境\n 查看有哪些环境  ls /share/envs  激活环境，以 torch1.7 为例,  conda activate /share/envs/torch1.7 为方便大家使用，/share/env 里的环境没有设置权限。因此\n 大家可以进行 pip install 操作，禁止 uninstall 和 upgrade 。 但是，conda install 是不允许的。（主要考虑是容易破坏包的版本依赖）   "},{"id":2,"href":"/ml-starter-guide/docs/others/feedback/","title":"反馈","section":"其他","content":"反馈 #  你可以在 Github issue 里提交反馈意见，我们的维护人员会尽量处理。\n你可以提交包括但不限于：\n 公共数据集请求 公共环境请求 公共软件下载  PS：在下面评论也可以 🙃\n"},{"id":3,"href":"/ml-starter-guide/docs/share/dataset/","title":"数据集","section":"公共资源","content":"公用数据集 #  常用公共数据集，欢迎补充 👏\nReal Denoising #   ELD SIDD  Optical Flow #   KITTI 2012 KITTI 2015  High Level #   VOC 2012  RGB Restoration #   BSD500 DIV2K Flick2K Train400  Face #   Celeba  Hyperspectral #   ICVL CAVE Harvard Remote Sensed  "},{"id":4,"href":"/ml-starter-guide/docs/share/software/","title":"软件","section":"公共资源","content":"公共软件 #  Miniconda #  "},{"id":5,"href":"/ml-starter-guide/docs/share/env/","title":"Conda","section":"公共资源","content":"公用 Conda 环境 #  实验室服务器配置有公共的 Conda 环境，大家可以自行 clone 或者直接使用\n公共环境列表 #     环境路径 Python版本 PyTorch版本 CUDA版本     /share/envs/torch1.7 3.6 1.7.1 11.0   /share/envs/torch1.10 3.7 1.10.0 11.3.1    使用方法 #   查看有哪些环境  ls /share/envs clone #  推荐 clone 一份到自己的 home 目录下，这样可以随意更改，不会影响到他人。\nclone 使用的是直接复制，所以无需重新下载大部分内容。（部分内容需要下载是正常的）\nconda create -n [name] --clone [path] 其中 [name] 是你想要的环境名，[path] 是你想要的拷贝的环境路径, 例如 /share/envs/torch1.7。\n详见 Conda教程\n直接使用 #   激活环境，以 torch1.7 为例  conda activate /share/envs/torch1.7 为方便大家使用，/share/envs 里的环境没有设置权限。因此\n 大家可以进行 pip install 操作，禁止 uninstall 和 upgrade 。 但是，conda install 是不允许的。（主要考虑是容易破坏包的版本依赖）   "},{"id":6,"href":"/ml-starter-guide/docs/recommend/","title":"外部资源","section":"Docs","content":"外部资源 #  这里推荐一些外部资源\n博客 #   苏剑林大佬的博客，非常值得仔细阅读， 地址  "},{"id":7,"href":"/ml-starter-guide/docs/writing/cite_standard/","title":"引用规范","section":"论文写作","content":"论文引用规范 #  标准引用格式就是写国际期刊的英文论文时引用别人论文的格式。\n到谷歌学术或谷歌学术镜像网站搜论文名，在引用里选BibTex打开。\n  会议论文 #  上面这个例子里第一行@后面是inproceedings，表示是会议论文，标准引用格式为：\n[作者1名 姓], [作者2名 姓], and [作者3名 姓]. [论文名]. In [会议全称斜体], pages [起始页码]\u0026ndash;[结束页码], [年份].\n根据上图的BibTeX，该论文应该写成:\n Yunhao Zou, Yinqiang Zheng, Tsuyoshi Takatani, and Ying Fu. Learning to reconstruct high speed and high dynamic range videos from events. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 2024\u0026ndash;2033, 2021.\n 注意每个印文标点后都有一个英文空格，页码之间的连接符是两个减号组成的。下面是其它一些会议的引用例子：（下图红色的数字是期刊自动补的页码，不用管）\n期刊论文 #  预印版论文 #  其它注意事项 #   写论文时一般用LaTex，只需把所有要引用的论文的BibTeX放一起，LaTex会自动生成参考文献的标准格式。有些期刊的LaTex模板可能会对标准格式做一点修改，比如名字缩写，咱们一定要提供标准格式的完整版的BibTeX，不要自己做这些改动，要让期刊模板自动改。 如果谷歌学术的BibTex信息不全可以点链接到对应的期刊官方网站，找到“Cite”按钮，查看BibTex引用信息。 期刊的编号（number）如果实在找不到就不写卷号后的括号。 个别期刊的页码可能不是“多少到多少”的形式，而是一长串带字母的编号，就以其期刊官网查到的这个编号为准。 人名有两种表示方法，一种是“名 姓”，一种是“姓, 名”。标准引用格式用的是第一种，因为要和两个人名之间的逗号区分开。  "},{"id":8,"href":"/ml-starter-guide/docs/writing/paper_search/","title":"检索方法","section":"论文写作","content":"论文检索方法 #  如何查某人的全部论文和被引次数 #   到谷歌学术（https://scholar.google.com/，需翻墙）或谷歌学术镜像网站（https://ac.scmor.com/）随便搜他的某个论文题目       在列出的各个作者里找到这个人，然后点击其名字进入其谷歌学术主页。右侧会显示他的所有论文被引数量之和，点击下面论文列表的“年份按钮”可以按时间从新到旧的顺序展示他的所有论文。同时列表里会显示每篇文章的被引次数。  "},{"id":9,"href":"/ml-starter-guide/posts/git/","title":"Git 教程","section":"博客","content":"Git 是用来版本管理的利器，利用它我们可以清楚的记录代码的改动情况，并且可以快速的恢复到任意时刻的版本。\n"},{"id":10,"href":"/ml-starter-guide/posts/ssh/","title":"SSH 免密登陆","section":"博客","content":"本文将介绍如何在 Windows 和 macOS 系统配置 SSH 免密登陆。\n1.客户端生成公私钥 #  本地客户端生成公私钥：（一路回车默认即可）\nssh-keygen 上面这个命令会在用户目录.ssh文件夹下创建公私钥\ncd ~/.ssh ls 你会看到以下两个文件：\n1. id_rsa （私钥） 2. id_rsa.pub (公钥) 2.上传公钥到服务器 #  假设这里测试用的服务器地址为：192.168.235.22，用户为：root\nmacOS macOS 用户可以使用以下命令上传公钥\nssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.235.22 Windows Windows 用户可以用 git bash，键入以下命令即可上传\ncat ~/.ssh/id_rsa.pub | ssh laizeqiang@10.140.0.32 \u0026#34;cat \u0026gt;\u0026gt; ~/.ssh/authorized_keys\u0026#34;  解释\n 上面这条命令实际是将 ~/.ssh/id_rsa.pub 附加到服务器上的 ~/.ssh/authorized_keys 文件中。  cd ~/.ssh vim authorized_keys 通过上述指令，可以看到客户端写入到服务器的 id_rsa.pub （公钥）内容。\n3.测试免密登录 #  客户端通过ssh连接远程服务器，就可以免密登录了。\nssh root@192.168.235.22 "},{"id":11,"href":"/ml-starter-guide/posts/ssh_x11/","title":"SSH 远程显示 Matplotlib 等图形界面","section":"博客","content":"通过本教程，你将可以在本地机器显示远程机器上运行 plt.show() 显示的窗口。\n效果 #   VSCode    命令行需要额外操作：  macos 需要给SSH加 -X 参数（大写X），例如 ssh -X user@10.10.10.8 windows下需要用支持x11 forward的terminal，比如xshell，tabby terminal，在profile里找到x11 forward勾上，例如tabby：      其他GUI软件也是可以显示的，比如 gedit , pycharm 等\n 1. 安装软件 #  macOS  安装xquartz , 地址 https://www.xquartz.org/  Windows  安装Xming, 地址 https://sourceforge.net/projects/xming/   2. VSCode 配置 #   vscode 安装remote x11插件  本地装Remote x11 ssh 远程装Remote x11      3. 配置~/.ssh/config #    改~/.ssh/config，在你要远程的Host添加 ForwardX11 yes  Host 3090-Local HostName 10.108.10.37 User laizeqiang ForwardX11 yes 4. 测试 #  import matplotlib.pyplot as plt; import numpy as np; img = np.ones((10,10)); plt.imshow(img); plt.show() "},{"id":12,"href":"/ml-starter-guide/posts/conda/","title":"Conda 简易教程","section":"博客","content":"基础用法 #   查看当前环境安装了哪些包  conda list  查看当前存在哪些虚拟环境  conda env list  创建虚拟环境  conda create -n your_env_name python=X.X 如果你想把环境装到别的指定文件夹里, 用 -p 而不是 -n 然后指定完成路径。\nconda create -p full_path python=X.X  删除虚拟环境  conda env remove -n name 环境拷贝 #   环境拷贝可以省去安装下载时间，直接从已有环境复制一份。 推荐在使用公共环境的时候，使用环境拷贝复制一个副本，这样就可以随意安装新的package而不会影响到他人。 部分pip安装的包可能需要重新下载，但大部分包都是直接复制的。  conda create -n [name] --clone [path] "},{"id":13,"href":"/ml-starter-guide/posts/tmux/","title":"Tmux 简易教程","section":"博客","content":"如果你希望关闭 terminal 窗口后，你的程序仍在服务器端运行，你可以试试 tmux 。\n介绍 #  一般来说，我们都是用自己电脑上的 vscode/pycharm 连接远程服务器跑实验。如果直接在 terminal 里输入指令，让程序运行起来，我们就不能退出 vscode/pycharm, 因为程序会终止。此外，自己电脑意外断网也会导致断连，程序终止。\nTmux 就是一个在我们关闭了终端窗口再打开，会话并不终止，而是继续运行之前程序的工具。\n效果 #   使用 #  首先， tmux 里有两个重要的概念：会话 和 窗口。\n其次，我们要知道：一个会话可以包含多个窗口。也就是说，我们可以新建一个会话，里面放好多窗口，每个窗口里跑不同的实验。\n会话相关指令\n 新建会话  tmux new -s 会话名 # 也可以只输入 tmux, 这个会话会默认从 0 开始命名 退出会话（需要时还可以进来）  Ctrl + b + d # 不是指令哈，是按下键盘上的三个键 列出全部的会话  tmux ls 恢复会话  tmux at -t 会话名 删除会话  tmux kill-session -t 会话名 在一个会话中，窗口相关指令\n 新建窗口  Ctrl + b + c 删除窗口  Ctrl + c # 先把程序停掉 Ctrl + d # 删除窗口 重命名窗口  Ctrl + b + , 切换当前显示的窗口  Ctrl + b + p # 切换到上一窗口 Ctrl + b + n # 切换到下一窗口 默认的 tmux 对鼠标的点击和滑动功能不友好的  Ctrl + b + : # 回车后再输入下一行的指令 set -g mouse on "},{"id":14,"href":"/ml-starter-guide/posts/better_shell/","title":"如何配置趁手的命令行环境","section":"博客","content":"如果你的命令行 shell 是 bash，你可以跟随这个教程配置更好用的 zsh 。\nIntroduction #  如何查看自己的 shell 的类型？\n请在命令行键入以下命令\necho $SHELL 效果 #  你的命令行将支持\n 语法高亮 git 提示 自动补全 更棒的历史记录 等  示意\n 方法 #   设置默认 shell 为 zsh  chsh -s /bin/zsh 进入 zsh  zsh 第一次使用会弹出是否新建配置文件，选 populate .zshrc\n配置 oh my zsh  sh -c \u0026#34;$(wget https://gitee.com/Devkings/oh_my_zsh_install/raw/master/install.sh -O -)\u0026#34; 配置高亮，自动补全插件  先执行这两\ngit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting 然后修改配置文件\nvim ~/.zshrc 找到如下这行配置代码，在后面追加插件名\nplugins=(zsh-autosuggestions zsh-syntax-highlighting) 更多阅读 #    oh my zsh "},{"id":15,"href":"/ml-starter-guide/docs/others/readme_template/","title":"Readme Template","section":"其他","content":"Method name #   Paper | Pretrained Model\nTitle (CVPR 2021)\nAuthor1, Author2, Author3\nNews [optional] #  Introduction #  paper的abstract\nHighlights #   创新点1 创新点2 创新点3  Network Architecture #  附图\nResult #  附图\nRequirement #   Pytorch \u0026gt;= 1.8 OpenCV \u0026hellip;\u0026hellip;  Getting Started #  （可参考以下内容）\n Install the requirments  conda install -c conda-forge opencv conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch pip install -r requirements.txt Clone the repo  git clone https://github.com/Zeqiang-Lai/DPHSIR.git cd DPHSIR pip install -e . Run cli or playgrounds   Download the sample input if you don\u0026rsquo;t have one.  # run cli python cli/main.py -i [input_path] [task] # run playground python playgrounds/deblur.py Citation #  If you find this work useful for your research, please cite:\nBibtex Acknowledgement [optional] #  "},{"id":16,"href":"/ml-starter-guide/docs/share/dataset/high-level/","title":"High Level","section":"数据集","content":"High Level #  VOC2012 #  "},{"id":17,"href":"/ml-starter-guide/docs/share/dataset/other/","title":"Other","section":"数据集","content":"Optical Flow #  KITTI 2012 #  KITTI 2015 #  Face #  Celeba #  "},{"id":18,"href":"/ml-starter-guide/docs/share/dataset/restoration/","title":"Restoration","section":"数据集","content":"Real Denoising #  ELD #  真实暗光去噪数据集\n 来源： Vandermode/ELD 服务器存放路径: /data/dataset/real_denoising/ELD  示例图:\n文件结构:\nSIDD #  RGB Restoration #  BSD500 #  DIV2K #  Flick2K #  Train400 #  Denoise Test #  BSD68 #  CBSD68 #  Kodak24 #  McMaster #  RNI15 #  RNI6 #  Set12 #  SR Test #  BSD100 #  Set14 #  Set5 #  SunHays80 #  Urban100 #  "},{"id":19,"href":"/ml-starter-guide/docs/share/cuda/","title":"Cuda","section":"公共资源","content":"Cuda Toolkit #  实验室服务器的共享目录包含数个预先安装好的 Cuda 版本。\n这些共享 Cuda 位于 /share/opt/ ，包含：\ncuda-11.3.1 cuda-11.1.0 cuda-10.2 切换 Cuda 版本 #  注意 ⚠️ ：大部分情况你应该都不用使用这个, Conda 安装的 PyTorch 自带 Toolkit。\n一般来说，只有在你需要编译自定义 Cuda 算子的时候，才可能需要下面的操作，如果你看不懂这里在说什么，那么大概率你不需要以下操作。\n 在 .bashrc 或 .zshrc 中添加以下内容\n大部分情况设置这个应该就够了\nexport CUDA_HOME=/share/opt/cuda-11.3.1 如果不行，添加\nexport LD_LIBRARY_PATH=/share/opt/cuda-11.3.1/lib64:$LD_LIBRARY_PATH export PATH=/share/opt/cuda-11.3.1/bin:$PATH "},{"id":20,"href":"/ml-starter-guide/docs/others/open_source/","title":"开源规范","section":"其他","content":"开源规范 #  作者: chengshuang\n 没有上传代码的同学请尽快上传 已上传代码的同学请检查其中是否有失效链接（百度网盘，onedrive）  另外，请大家按照以下模板中的内容对readme内容进行统一。\nREADME模版 #  模版预览  # Method name  [Paper](link) | [Pretrained Model](link) **Title (CVPR 2021)** Author1, Author2, Author3 ## News [optional]  ## Introduction  paper的abstract ## Highlights  + 创新点1 + 创新点2 + 创新点3 ## Network Architecture  附图 ## Result  附图 ## Requirement  - Pytorch \u0026gt;= 1.8 - OpenCV - ...... ## Getting Started  （可参考以下内容） 1. **Install the requirments** ```shell conda install -c conda-forge opencv conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch pip install -r requirements.txt ``` 2. **Clone the repo** ```shell git clone https://github.com/Zeqiang-Lai/DPHSIR.git cd DPHSIR pip install -e . ``` 3. **Run cli or playgrounds** - Download the [sample input](https://1drv.ms/u/s!AomvdxwcLmYImEc-Yfj2B2FBGEb0?e=vShXe9) if you don\u0026#39;t have one. ```shell # run cli python cli/main.py -i [input_path] [task] # run playground python playgrounds/deblur.py ``` ## Citation  If you find this work useful for your research, please cite: ```bibtex Bibtex ``` ## Acknowledgement [optional] "}]