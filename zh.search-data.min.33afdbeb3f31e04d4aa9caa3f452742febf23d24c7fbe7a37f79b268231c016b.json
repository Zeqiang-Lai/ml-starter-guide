[{"id":0,"href":"/ml-starter-guide/docs/share/","title":"公共资源","section":"Docs","content":"公共资源 #  实验室的服务器设置有公共数据集，公共Conda环境，公共软件资源等。\n大家可以按需自行获取使用。\n存放位置 #   数据集: /share/dataset Conda环境: /share/env 软件: /share/software  使用方法 #  数据集\n 大家可以自行读取，但请不要往/share/dataset写，以及删除东西（虽然你可能根本没有权限）。 使用 torchlight 里的 data.dataset 模块进行读取。（正在实现当中）  Conda环境\n 查看有哪些环境  ls /share/env 激活环境，以 qrnn3d 为例，（如果出错了，你可能需要先安装 conda）  source activate /share/envs/qrnn3d 为方便大家使用，/share/env 里的环境没有设置权限。因此\n 大家可以进行 pip install 操作，禁止 uninstall 和 upgrade 。 但是，conda install 是不允许的。（主要考虑是容易破坏包的版本依赖）   "},{"id":1,"href":"/ml-starter-guide/docs/faq/feedback/","title":"反馈","section":"常见问题","content":"反馈 #  你可以在 Github issue 里提交反馈意见，我们的维护人员会尽量处理。\n你可以提交包括但不限于：\n 公共数据集请求 公共环境请求 公共软件下载  PS：在下面评论也可以 🙃\n"},{"id":2,"href":"/ml-starter-guide/docs/faq/","title":"常见问题","section":"Docs","content":"常见问题 #  "},{"id":3,"href":"/ml-starter-guide/docs/share/dataset/","title":"数据集","section":"公共资源","content":"公用数据集 #  Real Denoising #  ELD #  真实暗光去噪数据集\n 来源： Vandermode/ELD 服务器存放路径: /data/dataset/real_denoising/ELD  示例图:\n文件结构:\nSIDD #  RGB Restoration #  BSD500 #  DIV2K #  Flick2K #  Train400 #  Denoise Test #  BSD68 #  CBSD68 #  Kodak24 #  McMaster #  RNI15 #  RNI6 #  Set12 #  SR Test #  BSD100 #  Set14 #  Set5 #  SunHays80 #  Urban100 #  Hyperspectral #  ICVL #  CAVE #  Harvard #  Remote Sensed #  Pavia #  Urban #  Indian #  Optical Flow #  KITTI 2012 #  KITTI 2015 #  Face #  Celeba #  High Level #  VOC2012 #  "},{"id":4,"href":"/ml-starter-guide/docs/share/software/","title":"软件","section":"公共资源","content":"公共软件 #  Miniconda #  "},{"id":5,"href":"/ml-starter-guide/docs/share/env/","title":"Conda环境","section":"公共资源","content":"公用 Conda 环境 #  公共环境列表 #     环境路径 Python版本 PyTorch版本 CUDA版本     /share/envs/qrnn3d 3.6 1.10 11.3    使用方法 #   查看有哪些环境  ls /share/env 激活环境，以 qrnn3d 为例，（如果出错了，你可能需要先安装 conda）  source activate /share/envs/qrnn3d 为方便大家使用，/share/env 里的环境没有设置权限。因此\n 大家可以进行 pip install 操作，禁止 uninstall 和 upgrade 。 但是，conda install 是不允许的。（主要考虑是容易破坏包的版本依赖）   "},{"id":6,"href":"/ml-starter-guide/docs/recommend/","title":"外部资源","section":"Docs","content":"外部资源 #  这里推荐一些外部资源\n博客 #   苏剑林大佬的博客，非常值得仔细阅读， 地址  "},{"id":7,"href":"/ml-starter-guide/posts/git/","title":"Git 教程","section":"博客","content":"Git 是用来版本管理的利器，利用它我们可以清楚的记录代码的改动情况，并且可以快速的恢复到任意时刻的版本。\n"},{"id":8,"href":"/ml-starter-guide/posts/ssh/","title":"SSH 免密登陆","section":"博客","content":"本文将介绍如何在 Windows 和 macOS 系统配置 SSH 免密登陆。\n1.客户端生成公私钥 #  本地客户端生成公私钥：（一路回车默认即可）\nssh-keygen 上面这个命令会在用户目录.ssh文件夹下创建公私钥\ncd ~/.ssh ls 你会看到以下两个文件：\n1. id_rsa （私钥） 2. id_rsa.pub (公钥) 2.上传公钥到服务器 #  假设这里测试用的服务器地址为：192.168.235.22，用户为：root\nmacOS macOS 用户可以使用以下命令上传公钥\nssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.235.22 Windows Windows 用户可以用 git bash，键入以下命令即可上传\ncat ~/.ssh/id_rsa.pub | ssh laizeqiang@10.140.0.32 \u0026#34;cat \u0026gt;\u0026gt; ~/.ssh/authorized_keys\u0026#34;  解释\n 上面这条命令实际是将 ~/.ssh/id_rsa.pub 附加到服务器上的 ~/.ssh/authorized_keys 文件中。  cd ~/.ssh vim authorized_keys 通过上述指令，可以看到客户端写入到服务器的 id_rsa.pub （公钥）内容。\n3.测试免密登录 #  客户端通过ssh连接远程服务器，就可以免密登录了。\nssh root@192.168.235.22 "},{"id":9,"href":"/ml-starter-guide/posts/ssh_x11/","title":"SSH 远程显示 Matplotlib 等图形界面","section":"博客","content":"通过本教程，你将可以在本地机器显示远程机器上运行 plt.show() 显示的窗口。\n效果 #   VSCode    命令行需要额外操作：  macos 需要给SSH加 -X 参数（大写X），例如 ssh -X user@10.10.10.8 windows下需要用支持x11 forward的terminal，比如xshell，tabby terminal，在profile里找到x11 forward勾上，例如tabby：      其他GUI软件也是可以显示的，比如 gedit , pycharm 等\n 1. 安装软件 #  macOS  安装xquartz , 地址 https://www.xquartz.org/  Windows  安装Xming, 地址 https://sourceforge.net/projects/xming/   2. VSCode 配置 #   vscode 安装remote x11插件  本地装Remote x11 ssh 远程装Remote x11      3. 配置~/.ssh/config #    改~/.ssh/config，在你要远程的Host添加 ForwardX11 yes  Host 3090-Local HostName 10.108.10.37 User laizeqiang ForwardX11 yes 4. 测试 #  import matplotlib.pyplot as plt; import numpy as np; img = np.ones((10,10)); plt.imshow(img); plt.show() "},{"id":10,"href":"/ml-starter-guide/posts/conda/","title":"Conda 简易教程","section":"博客","content":"基础用法 #   查看当前环境安装了哪些包  conda list  查看当前存在哪些虚拟环境  conda env list  创建虚拟环境  conda create -n your_env_name python=X.X  删除虚拟环境  conda env remove -n name 环境拷贝 #   环境拷贝可以省去安装下载时间，直接从已有环境复制一份。 推荐在使用公共环境的时候，使用环境拷贝复制一个副本，这样就可以随意安装新的package而不会影响到他人。 部分pip安装的包可能需要重新下载，但大部分包都是直接复制的。  conda create -n [name] --clone [path] "},{"id":11,"href":"/ml-starter-guide/posts/tmux/","title":"Tmux 简易教程","section":"博客","content":"如果你希望关闭 terminal 窗口后，你的程序仍在服务器端运行，你可以试试 tmux 。\n介绍 #  一般来说，我们都是用自己电脑上的 vscode/pycharm 连接远程服务器跑实验。如果直接在 terminal 里输入指令，让程序运行起来，我们就不能退出 vscode/pycharm, 因为程序会终止。此外，自己电脑意外断网也会导致断连，程序终止。\nTmux 就是一个在我们关闭了终端窗口再打开，会话并不终止，而是继续运行之前程序的工具。\n效果 #   使用 #  首先，我们了解一下 会话 和 窗口 两个概念。\n以做实验为例，假设我们需要在两个数据集（dataset_A, dataset_B）上跑两个实验（baseline, ours），我们可以开两个会话、起名为dataset_A和dataset_B；然后我们在dataset_A中新建两个窗口、起名为baseline和ours, 在这两个窗口中分别跑baseline和ours的实验。同样地，在dataset_B这个会话中，我们也新建baseline和ours两个窗口，跑dataset_B下的实验。\n 新建会话  tmux # 默认从0开始命名 tmux new -s 会话名 -n 窗口名 列出全部的会话  tmux ls 恢复会话  tmux at -t 会话名 删除会话  tmux kill-session -t 会话名 "},{"id":12,"href":"/ml-starter-guide/posts/better_shell/","title":"如何配置趁手的命令行环境","section":"博客","content":"如果你的命令行 shell 是 bash，你可以跟随这个教程配置更好用的 zsh 。\nIntroduction #  如何查看自己的 shell 的类型？\n请在命令行键入以下命令\necho $SHELL 效果 #  你的命令行将支持\n 语法高亮 git 提示 自动补全 更棒的历史记录 等  示意\n 方法 #   设置默认 shell 为 zsh  chsh -s /bin/zsh 进入 zsh  zsh 第一次使用会弹出是否新建配置文件，选 populate .zshrc\n配置 oh my zsh  sh -c \u0026#34;$(wget https://gitee.com/Devkings/oh_my_zsh_install/raw/master/install.sh -O -)\u0026#34; 配置高亮，自动补全插件  先执行这两\ngit clone https://gitee.com/han8gui/zsh-autosuggestions.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions git clone https://gitee.com/Annihilater/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting 然后修改配置文件\nvim ~/.zshrc 找到如下这行配置代码，在后面追加插件名\nplugins=(zsh-autosuggestions zsh-syntax-highlighting) 更多阅读 #    oh my zsh "}]